//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssemblyCSharp_ClientRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssemblyCSharp.ClientRequest), typeof(System.Object));
		L.RegFunction("setData", setData);
		L.RegFunction("WriterInt", WriterInt);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("WriterString", WriterString);
		L.RegFunction("ToBytes", ToBytes);
		L.RegFunction("New", _CreateAssemblyCSharp_ClientRequest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("headCode", get_headCode, set_headCode);
		L.RegVar("messageContent", get_messageContent, set_messageContent);
		L.RegVar("totelLenght", get_totelLenght, set_totelLenght);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssemblyCSharp_ClientRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AssemblyCSharp.ClientRequest obj = new AssemblyCSharp.ClientRequest();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AssemblyCSharp.ClientRequest.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.ClientRequest));
			obj.setData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriterInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.ClientRequest));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.WriterInt(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.ClientRequest));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.WriteShort(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriterString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.ClientRequest));
			string arg0 = ToLua.CheckString(L, 2);
			byte[] o = obj.WriterString(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.ClientRequest));
			byte[] o = obj.ToBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_headCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			int ret = obj.headCode;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index headCode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_messageContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			string ret = obj.messageContent;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index messageContent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_totelLenght(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			int ret = obj.totelLenght;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index totelLenght on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_headCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.headCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index headCode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_messageContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.messageContent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index messageContent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_totelLenght(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.ClientRequest obj = (AssemblyCSharp.ClientRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.totelLenght = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index totelLenght on a nil value" : e.Message);
		}
	}
}

