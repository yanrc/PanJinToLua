//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssemblyCSharp_CustomSocketWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssemblyCSharp.CustomSocket), typeof(System.Object));
		L.RegFunction("getInstance", getInstance);
		L.RegFunction("Connect", Connect);
		L.RegFunction("sendMsg", sendMsg);
		L.RegFunction("SendData", SendData);
		L.RegFunction("sendHeadData", sendHeadData);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("closeSocket", closeSocket);
		L.RegFunction("timeout", timeout);
		L.RegFunction("New", _CreateAssemblyCSharp_CustomSocket);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("databuffer", get_databuffer, set_databuffer);
		L.RegVar("offset", get_offset, set_offset);
		L.RegVar("end", get_end, set_end);
		L.RegVar("hasStartTimer", get_hasStartTimer, set_hasStartTimer);
		L.RegVar("isConnected", get_isConnected, set_isConnected);
		L.RegVar("watingPanel", get_watingPanel, set_watingPanel);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssemblyCSharp_CustomSocket(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AssemblyCSharp.CustomSocket obj = new AssemblyCSharp.CustomSocket();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AssemblyCSharp.CustomSocket.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AssemblyCSharp.CustomSocket o = AssemblyCSharp.CustomSocket.getInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			obj.Connect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int sendMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			AssemblyCSharp.ClientRequest arg0 = (AssemblyCSharp.ClientRequest)ToLua.CheckObject(L, 2, typeof(AssemblyCSharp.ClientRequest));
			obj.sendMsg(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SendData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int sendHeadData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			bool o = obj.sendHeadData();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int o = obj.ReadInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			short o = obj.ReadShort(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int closeSocket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			obj.closeSocket();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int timeout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)ToLua.CheckObject(L, 1, typeof(AssemblyCSharp.CustomSocket));
			object arg0 = ToLua.ToVarObject(L, 2);
			System.Timers.ElapsedEventArgs arg1 = (System.Timers.ElapsedEventArgs)ToLua.CheckObject(L, 3, typeof(System.Timers.ElapsedEventArgs));
			obj.timeout(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_databuffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			byte[] ret = obj.databuffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index databuffer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			int ret = obj.offset;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			int ret = obj.end;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index end on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasStartTimer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, AssemblyCSharp.CustomSocket.hasStartTimer);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			bool ret = obj.isConnected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isConnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_watingPanel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			UnityEngine.GameObject ret = obj.watingPanel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index watingPanel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_databuffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.databuffer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index databuffer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.offset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index offset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.end = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index end on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasStartTimer(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			AssemblyCSharp.CustomSocket.hasStartTimer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isConnected = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isConnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_watingPanel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssemblyCSharp.CustomSocket obj = (AssemblyCSharp.CustomSocket)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.watingPanel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index watingPanel on a nil value" : e.Message);
		}
	}
}

