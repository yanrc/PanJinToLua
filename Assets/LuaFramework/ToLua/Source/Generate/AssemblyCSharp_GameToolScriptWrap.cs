//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssemblyCSharp_GameToolScriptWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssemblyCSharp.GameToolScript), typeof(System.Object));
		L.RegFunction("setOtherCardObjPosition", setOtherCardObjPosition);
		L.RegFunction("cleaListener", cleaListener);
		L.RegFunction("boolArrToInt", boolArrToInt);
		L.RegFunction("IntToboolArr", IntToboolArr);
		L.RegFunction("ToggleListToInt", ToggleListToInt);
		L.RegFunction("IntToToggleList", IntToToggleList);
		L.RegFunction("CopyFolder", CopyFolder);
		L.RegFunction("CopyFilesInAndroid", CopyFilesInAndroid);
		L.RegFunction("GetIpAddress", GetIpAddress);
		L.RegFunction("New", _CreateAssemblyCSharp_GameToolScript);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssemblyCSharp_GameToolScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AssemblyCSharp.GameToolScript obj = new AssemblyCSharp.GameToolScript();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AssemblyCSharp.GameToolScript.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOtherCardObjPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.List<UnityEngine.GameObject> arg0 = (System.Collections.Generic.List<UnityEngine.GameObject>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<UnityEngine.GameObject>));
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			AssemblyCSharp.GameToolScript.setOtherCardObjPosition(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int cleaListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AssemblyCSharp.GameToolScript.cleaListener();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int boolArrToInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool[] arg0 = ToLua.CheckBoolArray(L, 1);
			int o = AssemblyCSharp.GameToolScript.boolArrToInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToboolArr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool[] o = AssemblyCSharp.GameToolScript.IntToboolArr(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleListToInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.List<UnityEngine.UI.Toggle> arg0 = (System.Collections.Generic.List<UnityEngine.UI.Toggle>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<UnityEngine.UI.Toggle>));
			int o = AssemblyCSharp.GameToolScript.ToggleListToInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToToggleList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.Collections.Generic.List<UnityEngine.UI.Toggle> arg1 = (System.Collections.Generic.List<UnityEngine.UI.Toggle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.UI.Toggle>));
			AssemblyCSharp.GameToolScript.IntToToggleList(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFolder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			AssemblyCSharp.GameToolScript.CopyFolder(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFilesInAndroid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string[] arg0 = ToLua.CheckStringArray(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Collections.IEnumerator o = AssemblyCSharp.GameToolScript.CopyFilesInAndroid(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIpAddress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = AssemblyCSharp.GameToolScript.GetIpAddress(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

